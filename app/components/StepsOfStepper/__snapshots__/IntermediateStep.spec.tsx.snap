// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should match exact snapshot on each step 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IntermediateStep
      activeStep={0}
      handleBack={[Function]}
      handleNext={[Function]}
      handleNextApplicationWindow={[Function]}
      handleNextEntireScreen={[Function]}
      resetPendingConnectionDevice={[Function]}
      resetUserAllowedConnection={[Function]}
      steps={
        Array [
          "a",
          "b",
          "c",
        ]
      }
    >
      <Col
        style={
          Object {
            "alignItems": "center",
            "display": "flex",
            "flexDirection": "column",
            "height": "260px",
            "justifyContent": "center",
          }
        }
        xs={12}
      >
        <div
          className="col-xs-12"
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "flexDirection": "column",
              "height": "260px",
              "justifyContent": "center",
            }
          }
        >
          <ScanQRStep>
            <div
              style={
                Object {
                  "textAlign": "center",
                }
              }
            >
              <Blueprint3.Text
                className="bp3-text"
              >
                <div
                  className="bp3-text"
                >
                  Scan the QR code
                </div>
              </Blueprint3.Text>
              <Blueprint3.Text
                className="bp3-text-muted"
              >
                <div
                  className="bp3-text-muted"
                >
                  ( make sure your computer and device are connected on same WiFi )
                </div>
              </Blueprint3.Text>
            </div>
            <div>
              <Blueprint3.Tooltip
                content="Click to make bigger"
                hoverCloseDelay={0}
                hoverOpenDelay={100}
                position="left"
                transitionDuration={100}
              >
                <Blueprint3.Popover
                  autoFocus={false}
                  boundary="scrollParent"
                  canEscapeKeyClose={false}
                  captureDismiss={false}
                  content="Click to make bigger"
                  defaultIsOpen={false}
                  disabled={false}
                  enforceFocus={false}
                  fill={false}
                  hasBackdrop={false}
                  hoverCloseDelay={0}
                  hoverOpenDelay={100}
                  inheritDarkTheme={true}
                  interactionKind="hover-target"
                  lazy={true}
                  minimal={false}
                  modifiers={Object {}}
                  openOnTargetFocus={true}
                  popoverClassName="bp3-tooltip"
                  position="left"
                  targetTagName="span"
                  transitionDuration={100}
                  usePortal={true}
                  wrapperTagName="span"
                >
                  <Manager>
                    <span
                      className="bp3-popover-wrapper"
                    >
                      <Reference
                        innerRef={[Function]}
                      >
                        <InnerReference
                          innerRef={[Function]}
                          setReferenceNode={[Function]}
                        >
                          <Blueprint3.ResizeSensor
                            onResize={[Function]}
                          >
                            <span
                              className="bp3-popover-target"
                              onBlur={[Function]}
                              onFocus={[Function]}
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                            >
                              <div
                                className="makeStyles-smallQRCode-1"
                                id="magnify-qr-code-button"
                                key=".0"
                                onClick={[Function]}
                                tabIndex={0}
                              >
                                <QRCode
                                  bgColor="rgba(0,0,0,0.0)"
                                  fgColor="#000000"
                                  imageSettings={
                                    Object {
                                      "height": 40,
                                      "src": "https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Electron_Software_Framework_Logo.svg/256px-Electron_Software_Framework_Logo.svg.png",
                                      "width": 40,
                                    }
                                  }
                                  includeMargin={false}
                                  level="H"
                                  renderAs="svg"
                                  size={128}
                                  value="http://255.255.255.255:65000/99999"
                                >
                                  <QRCodeSVG
                                    bgColor="rgba(0,0,0,0.0)"
                                    fgColor="#000000"
                                    imageSettings={
                                      Object {
                                        "height": 40,
                                        "src": "https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Electron_Software_Framework_Logo.svg/256px-Electron_Software_Framework_Logo.svg.png",
                                        "width": 40,
                                      }
                                    }
                                    includeMargin={false}
                                    level="H"
                                    size={128}
                                    value="http://255.255.255.255:65000/99999"
                                  >
                                    <svg
                                      height={128}
                                      shapeRendering="crispEdges"
                                      viewBox="0 0 33 33"
                                      width={128}
                                    >
                                      <path
                                        d="M0,0 h33v33H0z"
                                        fill="rgba(0,0,0,0.0)"
                                      />
                                      <path
                                        d="M0 0h7v1H0zM10 0h1v1H10zM13 0h2v1H13zM16 0h1v1H16zM19 0h1v1H19zM23 0h2v1H23zM26,0 h7v1H26zM0 1h1v1H0zM6 1h1v1H6zM11 1h2v1H11zM14 1h2v1H14zM19 1h6v1H19zM26 1h1v1H26zM32,1 h1v1H32zM0 2h1v1H0zM2 2h3v1H2zM6 2h1v1H6zM9 2h1v1H9zM12 2h3v1H12zM17 2h1v1H17zM19 2h1v1H19zM22 2h3v1H22zM26 2h1v1H26zM28 2h3v1H28zM32,2 h1v1H32zM0 3h1v1H0zM2 3h3v1H2zM6 3h1v1H6zM9 3h1v1H9zM11 3h2v1H11zM14 3h1v1H14zM16 3h5v1H16zM23 3h1v1H23zM26 3h1v1H26zM28 3h3v1H28zM32,3 h1v1H32zM0 4h1v1H0zM2 4h3v1H2zM6 4h1v1H6zM8 4h1v1H8zM12 4h3v1H12zM16 4h5v1H16zM22 4h1v1H22zM26 4h1v1H26zM28 4h3v1H28zM32,4 h1v1H32zM0 5h1v1H0zM6 5h1v1H6zM11 5h1v1H11zM13 5h1v1H13zM17 5h5v1H17zM24 5h1v1H24zM26 5h1v1H26zM32,5 h1v1H32zM0 6h7v1H0zM8 6h1v1H8zM10 6h1v1H10zM12 6h1v1H12zM14 6h1v1H14zM16 6h1v1H16zM18 6h1v1H18zM20 6h1v1H20zM22 6h1v1H22zM24 6h1v1H24zM26,6 h7v1H26zM8 7h1v1H8zM11 7h1v1H11zM14 7h1v1H14zM19 7h1v1H19zM23 7h1v1H23zM2 8h2v1H2zM6 8h3v1H6zM11 8h2v1H11zM14 8h1v1H14zM16 8h1v1H16zM20 8h7v1H20zM28 8h1v1H28zM0 9h4v1H0zM5 9h1v1H5zM7 9h1v1H7zM10 9h1v1H10zM12 9h1v1H12zM14 9h1v1H14zM16 9h4v1H16zM22 9h5v1H22zM29,9 h4v1H29zM1 10h1v1H1zM3 10h1v1H3zM6 10h1v1H6zM13 10h1v1H13zM18 10h1v1H18zM23 10h1v1H23zM26 10h1v1H26zM32,10 h1v1H32zM0 11h1v1H0zM2 11h3v1H2zM7 11h1v1H7zM9 11h1v1H9zM18 11h1v1H18zM20 11h1v1H20zM23 11h1v1H23zM25 11h4v1H25zM1 12h3v1H1zM6 12h1v1H6zM8 12h1v1H8zM11 12h2v1H11zM15 12h2v1H15zM19 12h2v1H19zM23 12h2v1H23zM28 12h1v1H28zM31 12h1v1H31zM7 13h2v1H7zM11 13h2v1H11zM15 13h1v1H15zM19 13h4v1H19zM25 13h1v1H25zM29 13h1v1H29zM1 14h1v1H1zM3 14h2v1H3zM6 14h3v1H6zM13 14h1v1H13zM15 14h1v1H15zM17 14h2v1H17zM21 14h1v1H21zM24 14h1v1H24zM27 14h1v1H27zM0 15h2v1H0zM3 15h1v1H3zM5 15h1v1H5zM9 15h1v1H9zM12 15h1v1H12zM14 15h2v1H14zM17 15h6v1H17zM25 15h1v1H25zM28 15h1v1H28zM30 15h1v1H30zM32,15 h1v1H32zM4 16h3v1H4zM9 16h1v1H9zM11 16h1v1H11zM19 16h1v1H19zM21 16h1v1H21zM23 16h1v1H23zM26 16h3v1H26zM30 16h1v1H30zM32,16 h1v1H32zM3 17h3v1H3zM10 17h4v1H10zM19 17h1v1H19zM23 17h1v1H23zM26 17h1v1H26zM28 17h1v1H28zM30 17h1v1H30zM32,17 h1v1H32zM2 18h1v1H2zM4 18h1v1H4zM6 18h4v1H6zM12 18h1v1H12zM14 18h3v1H14zM18 18h3v1H18zM24 18h1v1H24zM26 18h3v1H26zM30 18h1v1H30zM1 19h1v1H1zM4 19h2v1H4zM7 19h2v1H7zM10 19h1v1H10zM13 19h1v1H13zM18 19h3v1H18zM25 19h2v1H25zM32,19 h1v1H32zM2 20h1v1H2zM4 20h1v1H4zM6 20h1v1H6zM8 20h1v1H8zM11 20h1v1H11zM14 20h1v1H14zM16 20h1v1H16zM19 20h7v1H19zM27 20h1v1H27zM29 20h3v1H29zM0 21h1v1H0zM2 21h2v1H2zM8 21h2v1H8zM11 21h3v1H11zM17 21h2v1H17zM20 21h8v1H20zM29,21 h4v1H29zM2 22h3v1H2zM6 22h1v1H6zM11 22h2v1H11zM16 22h1v1H16zM18 22h1v1H18zM20 22h1v1H20zM22 22h3v1H22zM26 22h1v1H26zM28 22h1v1H28zM32,22 h1v1H32zM1 23h3v1H1zM5 23h1v1H5zM9 23h1v1H9zM12 23h1v1H12zM14 23h4v1H14zM19 23h2v1H19zM25 23h1v1H25zM27 23h1v1H27zM0 24h1v1H0zM2 24h2v1H2zM6 24h4v1H6zM13 24h2v1H13zM16 24h4v1H16zM23 24h6v1H23zM31 24h1v1H31zM8 25h8v1H8zM19 25h4v1H19zM24 25h1v1H24zM28 25h1v1H28zM30 25h2v1H30zM0 26h7v1H0zM8 26h2v1H8zM12 26h4v1H12zM19 26h1v1H19zM22 26h3v1H22zM26 26h1v1H26zM28 26h1v1H28zM30 26h2v1H30zM0 27h1v1H0zM6 27h1v1H6zM9 27h1v1H9zM11 27h3v1H11zM16 27h2v1H16zM19 27h1v1H19zM21 27h2v1H21zM24 27h1v1H24zM28 27h1v1H28zM30 27h1v1H30zM32,27 h1v1H32zM0 28h1v1H0zM2 28h3v1H2zM6 28h1v1H6zM11 28h5v1H11zM17 28h2v1H17zM23 28h6v1H23zM30 28h1v1H30zM32,28 h1v1H32zM0 29h1v1H0zM2 29h3v1H2zM6 29h1v1H6zM8 29h3v1H8zM12 29h3v1H12zM18 29h1v1H18zM21 29h3v1H21zM25 29h1v1H25zM27 29h1v1H27zM31,29 h2v1H31zM0 30h1v1H0zM2 30h3v1H2zM6 30h1v1H6zM8 30h3v1H8zM12 30h2v1H12zM20 30h7v1H20zM30 30h1v1H30zM0 31h1v1H0zM6 31h1v1H6zM10 31h4v1H10zM15 31h2v1H15zM18 31h1v1H18zM24 31h3v1H24zM29 31h1v1H29zM32,31 h1v1H32zM0 32h7v1H0zM9 32h2v1H9zM12 32h2v1H12zM16 32h2v1H16zM20 32h1v1H20zM27 32h2v1H27zM30 32h1v1H30z"
                                        fill="#000000"
                                      />
                                      <image
                                        height={10.3125}
                                        preserveAspectRatio="none"
                                        width={10.3125}
                                        x={11.34375}
                                        xlinkHref="https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Electron_Software_Framework_Logo.svg/256px-Electron_Software_Framework_Logo.svg.png"
                                        y={11.34375}
                                      />
                                    </svg>
                                  </QRCodeSVG>
                                </QRCode>
                              </div>
                            </span>
                          </Blueprint3.ResizeSensor>
                        </InnerReference>
                      </Reference>
                      <Blueprint3.Overlay
                        autoFocus={false}
                        backdropClassName="bp3-popover-backdrop"
                        backdropProps={Object {}}
                        canEscapeKeyClose={false}
                        canOutsideClickClose={false}
                        enforceFocus={false}
                        hasBackdrop={false}
                        isOpen={false}
                        lazy={true}
                        onClose={[Function]}
                        transitionDuration={100}
                        transitionName="bp3-popover"
                        usePortal={true}
                      />
                    </span>
                  </Manager>
                </Blueprint3.Popover>
              </Blueprint3.Tooltip>
            </div>
            <div
              style={
                Object {
                  "marginBottom": "10px",
                }
              }
            >
              <Blueprint3.Text
                className="bp3-text-muted"
              >
                <div
                  className="bp3-text-muted"
                >
                  or type the following address manualy in browser address bar on any device:
                </div>
              </Blueprint3.Text>
            </div>
            <Blueprint3.Tooltip
              content="Click to copy"
              hoverCloseDelay={0}
              hoverOpenDelay={100}
              position="left"
              transitionDuration={100}
            >
              <Blueprint3.Popover
                autoFocus={false}
                boundary="scrollParent"
                canEscapeKeyClose={false}
                captureDismiss={false}
                content="Click to copy"
                defaultIsOpen={false}
                disabled={false}
                enforceFocus={false}
                fill={false}
                hasBackdrop={false}
                hoverCloseDelay={0}
                hoverOpenDelay={100}
                inheritDarkTheme={true}
                interactionKind="hover-target"
                lazy={true}
                minimal={false}
                modifiers={Object {}}
                openOnTargetFocus={true}
                popoverClassName="bp3-tooltip"
                position="left"
                targetTagName="span"
                transitionDuration={100}
                usePortal={true}
                wrapperTagName="span"
              >
                <Manager>
                  <span
                    className="bp3-popover-wrapper"
                  >
                    <Reference
                      innerRef={[Function]}
                    >
                      <InnerReference
                        innerRef={[Function]}
                        setReferenceNode={[Function]}
                      >
                        <Blueprint3.ResizeSensor
                          onResize={[Function]}
                        >
                          <span
                            className="bp3-popover-target"
                            onBlur={[Function]}
                            onFocus={[Function]}
                            onMouseEnter={[Function]}
                            onMouseLeave={[Function]}
                          >
                            <Blueprint3.Button
                              className=""
                              icon="duplicate"
                              intent="primary"
                              key=".0"
                              style={
                                Object {
                                  "borderRadius": "100px",
                                }
                              }
                              tabIndex={0}
                            >
                              <button
                                className="bp3-button bp3-intent-primary"
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                style={
                                  Object {
                                    "borderRadius": "100px",
                                  }
                                }
                                tabIndex={0}
                                type="button"
                              >
                                <Blueprint3.Icon
                                  icon="duplicate"
                                  key="leftIcon"
                                >
                                  <span
                                    className="bp3-icon bp3-icon-duplicate"
                                    icon="duplicate"
                                  >
                                    <svg
                                      data-icon="duplicate"
                                      height={16}
                                      viewBox="0 0 16 16"
                                      width={16}
                                    >
                                      <desc>
                                        duplicate
                                      </desc>
                                      <path
                                        d="M15 0H5c-.55 0-1 .45-1 1v2h2V2h8v7h-1v2h2c.55 0 1-.45 1-1V1c0-.55-.45-1-1-1zm-4 4H1c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h10c.55 0 1-.45 1-1V5c0-.55-.45-1-1-1zm-1 10H2V6h8v8z"
                                        fillRule="evenodd"
                                        key="0"
                                      />
                                    </svg>
                                  </span>
                                </Blueprint3.Icon>
                                <span
                                  className="bp3-button-text"
                                  key="text"
                                >
                                  http://255.255.255.255:65000/99999
                                </span>
                                <Blueprint3.Icon
                                  key="rightIcon"
                                />
                              </button>
                            </Blueprint3.Button>
                          </span>
                        </Blueprint3.ResizeSensor>
                      </InnerReference>
                    </Reference>
                    <Blueprint3.Overlay
                      autoFocus={false}
                      backdropClassName="bp3-popover-backdrop"
                      backdropProps={Object {}}
                      canEscapeKeyClose={false}
                      canOutsideClickClose={false}
                      enforceFocus={false}
                      hasBackdrop={false}
                      isOpen={false}
                      lazy={true}
                      onClose={[Function]}
                      transitionDuration={100}
                      transitionName="bp3-popover"
                      usePortal={true}
                    />
                  </span>
                </Manager>
              </Blueprint3.Popover>
            </Blueprint3.Tooltip>
            <Blueprint3.Dialog
              canEscapeKeyClose={true}
              canOutsideClickClose={true}
              className="makeStyles-bigQRCodeDialogRoot-3"
              id="bp3-qr-code-dialog-root"
              isOpen={false}
              onClose={[Function]}
              style={
                Object {
                  "position": "relative",
                  "top": "-30px",
                }
              }
              transitionDuration={0}
            >
              <Blueprint3.Overlay
                autoFocus={true}
                backdropProps={Object {}}
                canEscapeKeyClose={true}
                canOutsideClickClose={true}
                className="bp3-overlay-scroll-container"
                enforceFocus={true}
                hasBackdrop={true}
                id="bp3-qr-code-dialog-root"
                isOpen={false}
                lazy={true}
                onClose={[Function]}
                style={
                  Object {
                    "position": "relative",
                    "top": "-30px",
                  }
                }
                transitionDuration={0}
                transitionName="bp3-overlay"
                usePortal={true}
              />
            </Blueprint3.Dialog>
          </ScanQRStep>
          <Blueprint3.Button
            onClick={[Function]}
          >
            <button
              className="bp3-button"
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              type="button"
            >
              <Blueprint3.Icon
                key="leftIcon"
              />
              <span
                className="bp3-button-text"
                key="text"
              >
                Connect Test Device
              </span>
              <Blueprint3.Icon
                key="rightIcon"
              />
            </button>
          </Blueprint3.Button>
          <Blueprint3.Button
            icon="chevron-left"
            intent="danger"
            onClick={[Function]}
            style={
              Object {
                "borderRadius": "100px",
                "display": "none",
                "marginTop": "10px",
              }
            }
            text="No, I need to share other thing"
          >
            <button
              className="bp3-button bp3-intent-danger"
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              style={
                Object {
                  "borderRadius": "100px",
                  "display": "none",
                  "marginTop": "10px",
                }
              }
              type="button"
            >
              <Blueprint3.Icon
                icon="chevron-left"
                key="leftIcon"
              >
                <span
                  className="bp3-icon bp3-icon-chevron-left"
                  icon="chevron-left"
                >
                  <svg
                    data-icon="chevron-left"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      chevron-left
                    </desc>
                    <path
                      d="M7.41 8l3.29-3.29c.19-.18.3-.43.3-.71a1.003 1.003 0 00-1.71-.71l-4 4C5.11 7.47 5 7.72 5 8c0 .28.11.53.29.71l4 4a1.003 1.003 0 001.42-1.42L7.41 8z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </Blueprint3.Icon>
              <span
                className="bp3-button-text"
                key="text"
              >
                No, I need to share other thing
              </span>
              <Blueprint3.Icon
                key="rightIcon"
              />
            </button>
          </Blueprint3.Button>
        </div>
      </Col>
    </IntermediateStep>
  </Router>
</BrowserRouter>
`;

exports[`should match exact snapshot on each step 2`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IntermediateStep
      activeStep={1}
      handleBack={[Function]}
      handleNext={[Function]}
      handleNextApplicationWindow={[Function]}
      handleNextEntireScreen={[Function]}
      resetPendingConnectionDevice={[Function]}
      resetUserAllowedConnection={[Function]}
      steps={
        Array [
          "a",
          "b",
          "c",
        ]
      }
    >
      <Col
        style={
          Object {
            "alignItems": "center",
            "display": "flex",
            "flexDirection": "column",
            "height": "260px",
            "justifyContent": "center",
          }
        }
        xs={12}
      >
        <div
          className="col-xs-12"
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "flexDirection": "column",
              "height": "260px",
              "justifyContent": "center",
            }
          }
        >
          <ChooseAppOrScreeenStep
            handleNextApplicationWindow={[Function]}
            handleNextEntireScreen={[Function]}
          >
            <div
              style={
                Object {
                  "marginBottom": "10px",
                }
              }
            >
              <Blueprint3.Text>
                <div
                  className=""
                >
                  Choose Entire Screen or App window you want to view on other device
                </div>
              </Blueprint3.Text>
            </div>
            <ShareEntireScreenOrAppWindowControlGroup
              handleNextApplicationWindow={[Function]}
              handleNextEntireScreen={[Function]}
            >
              <Blueprint3.ControlGroup
                className="makeStyles-controlGroupRoot-4"
                fill={true}
                id="share-screen-or-app-btn-group"
                vertical={false}
              >
                <div
                  className="bp3-control-group bp3-fill makeStyles-controlGroupRoot-4"
                  id="share-screen-or-app-btn-group"
                >
                  <Blueprint3.Button
                    className="makeStyles-shareEntireScreenButton-5"
                    intent="primary"
                    onClick={[Function]}
                  >
                    <button
                      className="bp3-button bp3-intent-primary makeStyles-shareEntireScreenButton-5"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      type="button"
                    >
                      <Blueprint3.Icon
                        key="leftIcon"
                      />
                      <span
                        className="bp3-button-text"
                        key="text"
                      >
                        <Blueprint3.Icon
                          className="makeStyles-shareEntireScreenButtonIcon-6"
                          color="white"
                          icon="desktop"
                          iconSize={100}
                        >
                          <span
                            className="bp3-icon bp3-icon-desktop makeStyles-shareEntireScreenButtonIcon-6"
                            icon="desktop"
                          >
                            <svg
                              data-icon="desktop"
                              fill="white"
                              height={100}
                              viewBox="0 0 20 20"
                              width={100}
                            >
                              <desc>
                                desktop
                              </desc>
                              <path
                                d="M19 0H1C.45 0 0 .45 0 1v13c0 .55.45 1 1 1h5.67l-.5 3H5c-.55 0-1 .45-1 1s.45 1 1 1h10c.55 0 1-.45 1-1s-.45-1-1-1h-1.17l-.5-3H19c.55 0 1-.45 1-1V1c0-.55-.45-1-1-1zm-1 13H2V2h16v11z"
                                fillRule="evenodd"
                                key="0"
                              />
                            </svg>
                          </span>
                        </Blueprint3.Icon>
                        <Blueprint3.Text
                          className="bp3-running-text"
                        >
                          <div
                            className="bp3-running-text"
                          >
                            Entire Screen
                          </div>
                        </Blueprint3.Text>
                      </span>
                      <Blueprint3.Icon
                        key="rightIcon"
                      />
                    </button>
                  </Blueprint3.Button>
                  <Blueprint3.Button
                    className="makeStyles-shareAppButton-7"
                    intent="primary"
                    onClick={[Function]}
                  >
                    <button
                      className="bp3-button bp3-intent-primary makeStyles-shareAppButton-7"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      type="button"
                    >
                      <Blueprint3.Icon
                        key="leftIcon"
                      />
                      <span
                        className="bp3-button-text"
                        key="text"
                      >
                        <Blueprint3.Icon
                          className="makeStyles-shareAppButtonIcon-8"
                          color="white"
                          icon="application"
                          iconSize={100}
                        >
                          <span
                            className="bp3-icon bp3-icon-application makeStyles-shareAppButtonIcon-8"
                            icon="application"
                          >
                            <svg
                              data-icon="application"
                              fill="white"
                              height={100}
                              viewBox="0 0 20 20"
                              width={100}
                            >
                              <desc>
                                application
                              </desc>
                              <path
                                d="M3.5 9h9c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-9c-.28 0-.5.22-.5.5s.22.5.5.5zm0 2h5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-5c-.28 0-.5.22-.5.5s.22.5.5.5zM19 1H1c-.55 0-1 .45-1 1v16c0 .55.45 1 1 1h18c.55 0 1-.45 1-1V2c0-.55-.45-1-1-1zm-1 16H2V6h16v11zM3.5 13h7c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-7c-.28 0-.5.22-.5.5s.22.5.5.5z"
                                fillRule="evenodd"
                                key="0"
                              />
                            </svg>
                          </span>
                        </Blueprint3.Icon>
                        <Blueprint3.Text
                          className="bp3-running-text"
                        >
                          <div
                            className="bp3-running-text"
                          >
                            Application Window
                          </div>
                        </Blueprint3.Text>
                      </span>
                      <Blueprint3.Icon
                        key="rightIcon"
                      />
                    </button>
                  </Blueprint3.Button>
                  <Blueprint3.Button
                    active={true}
                    className="makeStyles-orDecorationButton-9"
                  >
                    <button
                      className="bp3-button bp3-active makeStyles-orDecorationButton-9"
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      type="button"
                    >
                      <Blueprint3.Icon
                        key="leftIcon"
                      />
                      <span
                        className="bp3-button-text"
                        key="text"
                      >
                        OR
                      </span>
                      <Blueprint3.Icon
                        key="rightIcon"
                      />
                    </button>
                  </Blueprint3.Button>
                </div>
              </Blueprint3.ControlGroup>
              <ChooseAppOrScreenOverlay
                handleClose={[Function]}
                handleNextApplicationWindow={[Function]}
                handleNextEntireScreen={[Function]}
                isChooseAppOrScreenOverlayOpen={false}
                isEntireScreenToShareChosen={false}
              >
                <Blueprint3.Dialog
                  autoFocus={true}
                  canEscapeKeyClose={true}
                  canOutsideClickClose={true}
                  className="makeStyles-dialogRoot-10 choose-app-or-screen-dialog"
                  enforceFocus={true}
                  hasBackdrop={true}
                  isOpen={false}
                  onClose={[Function]}
                  transitionDuration={0}
                  usePortal={true}
                >
                  <Blueprint3.Overlay
                    autoFocus={true}
                    backdropProps={Object {}}
                    canEscapeKeyClose={true}
                    canOutsideClickClose={true}
                    className="bp3-overlay-scroll-container"
                    enforceFocus={true}
                    hasBackdrop={true}
                    isOpen={false}
                    lazy={true}
                    onClose={[Function]}
                    transitionDuration={0}
                    transitionName="bp3-overlay"
                    usePortal={true}
                  />
                </Blueprint3.Dialog>
              </ChooseAppOrScreenOverlay>
            </ShareEntireScreenOrAppWindowControlGroup>
          </ChooseAppOrScreeenStep>
          <Blueprint3.Button
            intent="none"
            onClick={[Function]}
            rightIcon="chevron-right"
            style={
              Object {
                "borderRadius": "100px",
                "display": "none",
                "textAlign": "center",
                "width": "100%",
              }
            }
          >
            <button
              className="bp3-button"
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              style={
                Object {
                  "borderRadius": "100px",
                  "display": "none",
                  "textAlign": "center",
                  "width": "100%",
                }
              }
              type="button"
            >
              <Blueprint3.Icon
                key="leftIcon"
              />
              <span
                className="bp3-button-text"
                key="text"
              >
                Next
              </span>
              <Blueprint3.Icon
                icon="chevron-right"
                key="rightIcon"
              >
                <span
                  className="bp3-icon bp3-icon-chevron-right"
                  icon="chevron-right"
                >
                  <svg
                    data-icon="chevron-right"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      chevron-right
                    </desc>
                    <path
                      d="M10.71 7.29l-4-4a1.003 1.003 0 00-1.42 1.42L8.59 8 5.3 11.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71l4-4c.18-.18.29-.43.29-.71 0-.28-.11-.53-.29-.71z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </Blueprint3.Icon>
            </button>
          </Blueprint3.Button>
          <Blueprint3.Button
            icon="chevron-left"
            intent="danger"
            onClick={[Function]}
            style={
              Object {
                "borderRadius": "100px",
                "display": "none",
                "marginTop": "10px",
              }
            }
            text="No, I need to share other thing"
          >
            <button
              className="bp3-button bp3-intent-danger"
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              style={
                Object {
                  "borderRadius": "100px",
                  "display": "none",
                  "marginTop": "10px",
                }
              }
              type="button"
            >
              <Blueprint3.Icon
                icon="chevron-left"
                key="leftIcon"
              >
                <span
                  className="bp3-icon bp3-icon-chevron-left"
                  icon="chevron-left"
                >
                  <svg
                    data-icon="chevron-left"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      chevron-left
                    </desc>
                    <path
                      d="M7.41 8l3.29-3.29c.19-.18.3-.43.3-.71a1.003 1.003 0 00-1.71-.71l-4 4C5.11 7.47 5 7.72 5 8c0 .28.11.53.29.71l4 4a1.003 1.003 0 001.42-1.42L7.41 8z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </Blueprint3.Icon>
              <span
                className="bp3-button-text"
                key="text"
              >
                No, I need to share other thing
              </span>
              <Blueprint3.Icon
                key="rightIcon"
              />
            </button>
          </Blueprint3.Button>
        </div>
      </Col>
    </IntermediateStep>
  </Router>
</BrowserRouter>
`;

exports[`should match exact snapshot on each step 3`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <IntermediateStep
      activeStep={2}
      handleBack={[Function]}
      handleNext={[Function]}
      handleNextApplicationWindow={[Function]}
      handleNextEntireScreen={[Function]}
      resetPendingConnectionDevice={[Function]}
      resetUserAllowedConnection={[Function]}
      steps={
        Array [
          "a",
          "b",
          "c",
        ]
      }
    >
      <Col
        style={
          Object {
            "alignItems": "center",
            "display": "flex",
            "flexDirection": "column",
            "height": "260px",
            "justifyContent": "center",
          }
        }
        xs={12}
      >
        <div
          className="col-xs-12"
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "flexDirection": "column",
              "height": "260px",
              "justifyContent": "center",
            }
          }
        >
          <ConfirmStep
            device={null}
          >
            <div
              style={
                Object {
                  "marginBottom": "10px",
                }
              }
            >
              <Blueprint3.Text>
                <div
                  className=""
                >
                  Check if all is OK and click "Confirm"
                </div>
              </Blueprint3.Text>
            </div>
            <Blueprint3.Card
              elevation={0}
              interactive={false}
              style={
                Object {
                  "marginBottom": "10px",
                }
              }
            >
              <div
                className="bp3-card bp3-elevation-0"
                style={
                  Object {
                    "marginBottom": "10px",
                  }
                }
              >
                <Blueprint3.Text>
                  <div
                    className=""
                  >
                    Device: undefined
                  </div>
                </Blueprint3.Text>
                <Blueprint3.Text>
                  <div
                    className=""
                  >
                    Device IP: undefined
                  </div>
                </Blueprint3.Text>
                <Blueprint3.Text>
                  <div
                    className=""
                  >
                    Device OS: undefined
                  </div>
                </Blueprint3.Text>
                <Blueprint3.Text>
                  <div
                    className=""
                  >
                    Session ID: undefined
                  </div>
                </Blueprint3.Text>
              </div>
            </Blueprint3.Card>
            <div
              style={
                Object {
                  "marginBottom": "10px",
                }
              }
            >
              <Blueprint3.Text
                className="bp3-text-muted"
              >
                <div
                  className="bp3-text-muted"
                >
                  Click "Back" if you need to change something
                </div>
              </Blueprint3.Text>
            </div>
          </ConfirmStep>
          <Blueprint3.Button
            intent="success"
            onClick={[Function]}
            rightIcon="small-tick"
            style={
              Object {
                "borderRadius": "100px",
                "display": "inline",
                "textAlign": "center",
                "width": "100%",
              }
            }
          >
            <button
              className="bp3-button bp3-intent-success"
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              style={
                Object {
                  "borderRadius": "100px",
                  "display": "inline",
                  "textAlign": "center",
                  "width": "100%",
                }
              }
              type="button"
            >
              <Blueprint3.Icon
                key="leftIcon"
              />
              <span
                className="bp3-button-text"
                key="text"
              >
                Confirm
              </span>
              <Blueprint3.Icon
                icon="small-tick"
                key="rightIcon"
              >
                <span
                  className="bp3-icon bp3-icon-small-tick"
                  icon="small-tick"
                >
                  <svg
                    data-icon="small-tick"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      small-tick
                    </desc>
                    <path
                      d="M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </Blueprint3.Icon>
            </button>
          </Blueprint3.Button>
          <Blueprint3.Button
            icon="chevron-left"
            intent="danger"
            onClick={[Function]}
            style={
              Object {
                "borderRadius": "100px",
                "display": "inline-block",
                "marginTop": "10px",
              }
            }
            text="No, I need to share other thing"
          >
            <button
              className="bp3-button bp3-intent-danger"
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              style={
                Object {
                  "borderRadius": "100px",
                  "display": "inline-block",
                  "marginTop": "10px",
                }
              }
              type="button"
            >
              <Blueprint3.Icon
                icon="chevron-left"
                key="leftIcon"
              >
                <span
                  className="bp3-icon bp3-icon-chevron-left"
                  icon="chevron-left"
                >
                  <svg
                    data-icon="chevron-left"
                    height={16}
                    viewBox="0 0 16 16"
                    width={16}
                  >
                    <desc>
                      chevron-left
                    </desc>
                    <path
                      d="M7.41 8l3.29-3.29c.19-.18.3-.43.3-.71a1.003 1.003 0 00-1.71-.71l-4 4C5.11 7.47 5 7.72 5 8c0 .28.11.53.29.71l4 4a1.003 1.003 0 001.42-1.42L7.41 8z"
                      fillRule="evenodd"
                      key="0"
                    />
                  </svg>
                </span>
              </Blueprint3.Icon>
              <span
                className="bp3-button-text"
                key="text"
              >
                No, I need to share other thing
              </span>
              <Blueprint3.Icon
                key="rightIcon"
              />
            </button>
          </Blueprint3.Button>
        </div>
      </Col>
    </IntermediateStep>
  </Router>
</BrowserRouter>
`;
